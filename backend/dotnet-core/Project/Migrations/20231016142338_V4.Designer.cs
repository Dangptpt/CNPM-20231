// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Models;

#nullable disable

namespace Project.Migrations
{
    [DbContext(typeof(ProjectContext))]
    [Migration("20231016142338_V4")]
    partial class V4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Project.Models.AbsentPerson", b =>
                {
                    b.Property<Guid>("AbsentPersonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("date");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Reason")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("date");

                    b.HasKey("AbsentPersonId")
                        .HasName("Pk_AbsentPersonId_AbsentIdId");

                    b.HasIndex("PersonId");

                    b.ToTable("AbsentPerson", (string)null);
                });

            modelBuilder.Entity("Project.Models.Person", b =>
                {
                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("HomeTown")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OwnerRelationship")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ResidenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PersonId")
                        .HasName("Pk_Person_PersonId");

                    b.HasIndex("ResidenceId");

                    b.ToTable("Person", (string)null);
                });

            modelBuilder.Entity("Project.Models.Record", b =>
                {
                    b.Property<Guid>("RecordId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Action")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResidenceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RecordId")
                        .HasName("Pk_Record_RecordId");

                    b.HasIndex("PersonId");

                    b.HasIndex("ResidenceId");

                    b.ToTable("Record", (string)null);
                });

            modelBuilder.Entity("Project.Models.Residence", b =>
                {
                    b.Property<Guid>("ResidenceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MenberNumber")
                        .HasColumnType("int");

                    b.Property<string>("OwnerName")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResidenceId")
                        .HasName("PK_Residence_ResidenceId");

                    b.ToTable("Residence", (string)null);
                });

            modelBuilder.Entity("Project.Models.ResidenceFee", b =>
                {
                    b.Property<Guid>("ResidenceFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cost")
                        .HasColumnType("int");

                    b.Property<bool>("IsObligatory")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResidenceFeeId")
                        .HasName("Pk_ResidenceFee_ResidenceFeeId");

                    b.ToTable("ResidenceFee", (string)null);
                });

            modelBuilder.Entity("Project.Models.ResidencePayment", b =>
                {
                    b.Property<Guid>("ResidenceReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ResidenceFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("ResidenceReceiptId", "ResidenceFeeId");

                    b.HasIndex("ResidenceFeeId");

                    b.ToTable("ResidencePayment", (string)null);
                });

            modelBuilder.Entity("Project.Models.ResidenceReceipt", b =>
                {
                    b.Property<Guid>("ResidenceReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ResidenceReceiptId")
                        .HasName("Pk_ResidenceReceipt_ResidenceReceiptId");

                    b.HasIndex("PersonId");

                    b.ToTable("ResidenceReceipt", (string)null);
                });

            modelBuilder.Entity("Project.Models.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"), 0L);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<bool>("Gender")
                        .HasColumnType("bit");

                    b.Property<string>("IdentityCardNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId")
                        .HasName("Pk_User_UserId");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("Project.Models.Vehicle", b =>
                {
                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("PersonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleId");

                    b.HasIndex("PersonId");

                    b.ToTable("Vehicle", (string)null);
                });

            modelBuilder.Entity("Project.Models.VehicleFee", b =>
                {
                    b.Property<Guid>("VehicleFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VehicleFeeId")
                        .HasName("Pk_VehicleFee_VehicleFeeId");

                    b.ToTable("VehicleFee", (string)null);
                });

            modelBuilder.Entity("Project.Models.VehiclePayment", b =>
                {
                    b.Property<Guid>("VehicleReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.HasKey("VehicleReceiptId", "VehicleFeeId");

                    b.HasIndex("VehicleFeeId");

                    b.ToTable("VehiclePayment", (string)null);
                });

            modelBuilder.Entity("Project.Models.VehicleReceipt", b =>
                {
                    b.Property<Guid>("VehicleReceiptId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("VehicleFeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("VehicleReceiptId");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleReceipt", (string)null);
                });

            modelBuilder.Entity("Project.Models.AbsentPerson", b =>
                {
                    b.HasOne("Project.Models.Person", "Person")
                        .WithMany("AbsentPepple")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_AbsentPerson_PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Project.Models.Person", b =>
                {
                    b.HasOne("Project.Models.Residence", "Residence")
                        .WithMany("People")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("Fk_Person_ResidenceId");

                    b.Navigation("Residence");
                });

            modelBuilder.Entity("Project.Models.Record", b =>
                {
                    b.HasOne("Project.Models.Person", "Person")
                        .WithMany("Records")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Record_PersonId");

                    b.HasOne("Project.Models.Residence", "Residence")
                        .WithMany("Records")
                        .HasForeignKey("ResidenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Record_ResidenceId");

                    b.Navigation("Person");

                    b.Navigation("Residence");
                });

            modelBuilder.Entity("Project.Models.ResidencePayment", b =>
                {
                    b.HasOne("Project.Models.ResidenceFee", "ResidenceFee")
                        .WithMany("ResidencePayments")
                        .HasForeignKey("ResidenceFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_ResidencePayment_ResidenceFeeId");

                    b.HasOne("Project.Models.ResidenceReceipt", "ResidenceReceipt")
                        .WithMany("ResidencePayments")
                        .HasForeignKey("ResidenceReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_ResidenceReceipt_ResidenceReceiptId");

                    b.Navigation("ResidenceFee");

                    b.Navigation("ResidenceReceipt");
                });

            modelBuilder.Entity("Project.Models.ResidenceReceipt", b =>
                {
                    b.HasOne("Project.Models.Person", "Person")
                        .WithMany("ResidenceReceipts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_ResidenceReceipt_PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Project.Models.Vehicle", b =>
                {
                    b.HasOne("Project.Models.Person", "Person")
                        .WithMany("Vehicles")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_Vehicle_PersonId");

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Project.Models.VehiclePayment", b =>
                {
                    b.HasOne("Project.Models.VehicleFee", "VehicleFee")
                        .WithMany("VehiclePayments")
                        .HasForeignKey("VehicleFeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_VehiclePayment_VehicleFeeId");

                    b.HasOne("Project.Models.VehicleReceipt", "VehicleReceipt")
                        .WithMany("VehiclePayments")
                        .HasForeignKey("VehicleReceiptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Fk_VehiclePayment_VehicleReceiptId");

                    b.Navigation("VehicleFee");

                    b.Navigation("VehicleReceipt");
                });

            modelBuilder.Entity("Project.Models.VehicleReceipt", b =>
                {
                    b.HasOne("Project.Models.Vehicle", "Vehicle")
                        .WithMany("VehicleReceipts")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("Fk_VehicleReceipt_VehicleId");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Project.Models.Person", b =>
                {
                    b.Navigation("AbsentPepple");

                    b.Navigation("Records");

                    b.Navigation("ResidenceReceipts");

                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Project.Models.Residence", b =>
                {
                    b.Navigation("People");

                    b.Navigation("Records");
                });

            modelBuilder.Entity("Project.Models.ResidenceFee", b =>
                {
                    b.Navigation("ResidencePayments");
                });

            modelBuilder.Entity("Project.Models.ResidenceReceipt", b =>
                {
                    b.Navigation("ResidencePayments");
                });

            modelBuilder.Entity("Project.Models.Vehicle", b =>
                {
                    b.Navigation("VehicleReceipts");
                });

            modelBuilder.Entity("Project.Models.VehicleFee", b =>
                {
                    b.Navigation("VehiclePayments");
                });

            modelBuilder.Entity("Project.Models.VehicleReceipt", b =>
                {
                    b.Navigation("VehiclePayments");
                });
#pragma warning restore 612, 618
        }
    }
}
